version: '3.8'
services:
  postgres:
    image: postgres:15
    container_name: schedule_postgres
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pgbouncer:
    image: edoburu/pgbouncer:1.15.0
    container_name: schedule_pgbouncer
    depends_on:
      - postgres
    ports:
      - "${PGBOUNCER_PORT}:6432"
    volumes:
      - ./pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    environment:
      - DB_HOST=postgres
    restart: unless-stopped

  redis:
    image: redis:7
    container_name: schedule_redis
    ports:
      - "6379:6379"
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    container_name: schedule_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "8080:80"
    depends_on:
      - postgres
    restart: unless-stopped

  backend:
    build:
      context: ./backend
    container_name: schedule_backend
    env_file: .env
    environment:
      - DATABASE_URL=${DATABASE_URL_PGBOUNCER}  # подключаемся через pgbouncer
    ports:
      - "8000:8000"
    depends_on:
      - pgbouncer
      - redis
    volumes:
      - ./backend:/app
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    restart: unless-stopped

volumes:
  pgdata:
