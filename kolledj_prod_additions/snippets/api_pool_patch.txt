# --- PATCH: PgBouncer-friendly asyncpg pool ---
# Place this near the top of main.py (imports):
# import asyncpg
# from typing import Optional

_pool: Optional[asyncpg.Pool] = None

@app.on_event("shutdown")
async def _shutdown_pool():
    global _pool
    if _pool is not None:
        await _pool.close()
        _pool = None

async def get_pool() -> asyncpg.Pool:
    """Single global pool; disables server-side prepared statements for PgBouncer.
    - statement_cache_size=0 makes asyncpg use simple protocol (no server-side prepared statements).
    - max_inactive_connection_lifetime prevents stale conns.
    - command_timeout for runaway queries.
    """
    global _pool
    if _pool is None:
        _pool = await asyncpg.create_pool(
            dsn=os.getenv("DATABASE_URL"),
            min_size=int(os.getenv("PG_POOL_MIN","5")),
            max_size=int(os.getenv("PG_POOL_MAX","20")),
            max_inactive_connection_lifetime=float(os.getenv("PG_MAX_IDLE","300")),
            command_timeout=float(os.getenv("PG_COMMAND_TIMEOUT","30")),
            timeout=float(os.getenv("PG_CONNECT_TIMEOUT","10")),
            statement_cache_size=0,  # <-- critical for PgBouncer (transaction pooling)
            server_settings={
                "application_name": os.getenv("APP_NAME","schedule-api"),
                "jit": "off"
            }
        )
    return _pool
# --- END PATCH ---
