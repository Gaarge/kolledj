apiVersion: v1
kind: PersistentVolumeClaim
metadata: { name: pgdata }
spec:
  accessModes: [ "ReadWriteOnce" ]
  resources: { requests: { storage: 1Gi } }
---
apiVersion: v1
kind: ConfigMap
metadata: { name: pg-init-sql }
data:
  00_create_schema.sql: |
        -- ВАЖНО: этот файл рассчитан на пустую БД (первый старт тома)
        -- Если БД уже есть, применяй вручную через psql.
        
        -- Расширение для bcrypt-хеширования
        CREATE EXTENSION IF NOT EXISTS pgcrypto;
        
        -- Пользователи приложения
        CREATE TABLE IF NOT EXISTS users (
          id SERIAL PRIMARY KEY,
          username TEXT UNIQUE NOT NULL,
          password_hash TEXT NOT NULL,
          role TEXT NOT NULL CHECK (role IN ('student','teacher','admin'))
        );
        
        -- Нормализованное расписание (то, что реально использует API)
        CREATE TABLE IF NOT EXISTS weekday_schedule (
          id SERIAL PRIMARY KEY,
          group_name TEXT NOT NULL,               -- имя группы, строкой как в Excel
          weekday SMALLINT NOT NULL CHECK (weekday BETWEEN 1 AND 7), -- Пн=1..Вс=7
          pair_number SMALLINT NOT NULL CHECK (pair_number BETWEEN 1 AND 20),
          time_start TIME NOT NULL,
          time_end   TIME NOT NULL,
          subject    TEXT NOT NULL,
          teacher    TEXT NOT NULL,
          room       TEXT NOT NULL,
          week_type  TEXT NOT NULL CHECK (week_type IN ('all','even','odd'))
        );
        
        CREATE INDEX IF NOT EXISTS idx_ws_group_weekday
          ON weekday_schedule (group_name, weekday);
        -- Тестовые учётки (хешируются через pgcrypto/crypt)
        INSERT INTO users (username, password_hash, role) VALUES
        ('student1', crypt('studentpass', gen_salt('bf')), 'student')
        ON CONFLICT (username) DO NOTHING;
        
        INSERT INTO users (username, password_hash, role) VALUES
        ('teacher1', crypt('teacherpass', gen_salt('bf')), 'teacher')
        ON CONFLICT (username) DO NOTHING;
        
        INSERT INTO users (username, password_hash, role) VALUES
        ('admin1', crypt('adminpass', gen_salt('bf')), 'admin')
        ON CONFLICT (username) DO NOTHING;
        
---
apiVersion: apps/v1
kind: Deployment
metadata: { name: postgres }
spec:
  selector: { matchLabels: { app: postgres } }
  replicas: 1
  template:
    metadata: { labels: { app: postgres } }
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: db
        image: gaarge/db:3.6
        ports: [ { containerPort: 5432 } ]
        env:
          - { name: POSTGRES_USER,     value: "schedule_user" }
          - { name: POSTGRES_PASSWORD, value: "schedule_pass" }
          - { name: POSTGRES_DB,       value: "schedule_db" }
          - { name: EXCEL_PATH,        value: "/app/excel/schedule.xlsx" }
        volumeMounts:
          - { name: data,     mountPath: /var/lib/postgresql/data }
          - { name: init-sql, mountPath: /docker-entrypoint-initdb.d }
        lifecycle:
          postStart:
            exec:
               command: ["sh","-lc","set -e; echo '[postStart] waiting for Postgres...'; for i in $(seq 1 60); do pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -h 127.0.0.1 && break; sleep 2; done; pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -h 127.0.0.1; echo \"[postStart] checking $EXCEL_PATH\"; [ -f \"$EXCEL_PATH\" ]; export DATABASE_URL=\"postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@127.0.0.1:5432/${POSTGRES_DB}\"; echo '[postStart] importing...'; /opt/venv/bin/python /app/import_from_excel.py; echo '[postStart] import finished'"]
               
               
      volumes:
        - name: data
          persistentVolumeClaim: { claimName: pgdata }
        - name: init-sql
          configMap: { name: pg-init-sql }
---
apiVersion: v1
kind: Service
metadata: { name: postgres }
spec:
  selector: { app: postgres }
  ports: [ { port: 5432, targetPort: 5432 } ]
